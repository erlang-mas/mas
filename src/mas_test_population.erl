%%%-----------------------------------------------------------------------------
%%% @doc Population behaviour for testing purposes.
%%% @end
%%%-----------------------------------------------------------------------------

-module(mas_test_population).

-behaviour(mas_population).

%%% API
-export([]).

%%% Population callbacks
-export([init/2,
         initial_agent/1,
         behaviours/0,
         behaviour/2,
         apply_behaviour/3,
         preprocess/2,
         postprocess/2,
         metrics/2,
         terminate/2]).

-record(state, {}).

%%%=============================================================================
%%% Population callbacks
%%%=============================================================================

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
init(Agents, _SP) ->
    {Agents, #state{}}.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
initial_agent(_SP) ->
    S = [rand:uniform() || _ <- lists:seq(1, 10)],
    {S, 10}.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
behaviours() -> [fight, reproduction].

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
behaviour(_Agent, _State) ->
    case rand:uniform() of
        R when R < 0.1 ->
            migration;
        R when R < 0.4 ->
            fight;
        R when R >= 0.4 ->
            reproduction
    end.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
apply_behaviour(fight, Agents, _State) ->
    Agents;
apply_behaviour(reproduction, Agents, _State) ->
    Agents.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
preprocess(Agents, State) ->
    {Agents, State}.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
postprocess(Agents, State) ->
    {Agents, State}.

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
metrics(_Agents, _State) ->
    [{foo, 1}, {bar, 2}].

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
terminate(_Agents, _State) ->
    ok.
